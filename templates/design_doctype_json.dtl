{
  "_id": "_design/{{ _id }}",
  "version": 8,
  "views": {
    "alldocs": {
      "map": "function(doc) { 
        if (doc.doctype == '{{ _id }}' && doc.fieldsets)  { 
          emit(doc._id, doc) 
        } 
      }" 
    },

    "head_charseqs": {
      "map": "function(doc) {
        if (doc.doctype === '{{ _id }}' && doc.category === 'field' && doc.head) {
          emit(doc.order, doc.charseq);
        }
      }"
    },
    
    "quickdocs": {
      "map": "function(doc) { 
        if (doc.doctype == '{{ _id }}' && doc.fieldsets && !doc.deleted_)  { 
          emit(doc._id, null) 
        } 
      }" 
    },
    
    "deaddocs": {
      "map": "function(doc) { 
        if (doc.doctype == '{{ _id }}' && doc.fieldsets && doc.deleted_)  { 
          emit(doc._id, doc) 
        } 
      }" 
    },
    
     "fieldsets": {
       "map": "function(doc) { 
         if (doc.category == 'fieldset' && doc.doctype == '{{ _id }}')  { 
          emit(doc.order, doc) 
        } 
      }" 
    },

    "fieldsets_simple": {
      "map": "function(doc) { 
        if (doc.category == 'fieldset' && doc.doctype == '{{ _id }}')  { 
          emit(doc.label, doc.name) 
        } 
      }" 
    },
    
    "as_key_vals": {
      "map": "function(doc) {
        function emitKeyVals(container) {
          var v;
          var k;

          container.fields.forEach(function(field, index) {
            if (field.name === 'value_') {
              v = field.value;
            } else if (field.name === 'key_') {
              k = field.value;
            }
          });

          if (!k) {
            emit(v, v);
          } else {
            emit(k, v);
          }
        }

        if (doc.doctype == '{{ _id }}' && doc.fieldsets && !doc.deleted_) {
          doc.fieldsets.forEach(function(fieldset, index) {
            if (fieldset.multiple) {
              fieldset.multifields.forEach(emitKeyVals(multifield));
            } else if (!fieldset.multiple) {
              emitKeyVals(fieldset);
            }
          });
        }
      }"
    },
    
    "ids_as_keys" : {
      "map": "function(doc) {
        var outDoc = {};
        
        if (doc.doctype == '{{ _id }}' && doc.fieldsets && !doc.deleted_) {
          outDoc = {
            '_id': doc._id,
            '_rev': doc._rev,
            'updated_at': doc.updated_at_,
            'update_user': doc.update_user_,
            'created_at': doc.created_at_,
            'create_user': doc.create_user_
          };
          
          doc.fieldsets.forEach(function(fieldset, index) {
            var fieldsetId = 'fieldset_' + fieldset.id;
            
            if (!fieldset.multiple) {
              outDoc[fieldsetId] = fieldset.fields.map(function(field, index) {
                var tmp = {};
                tmp['field_' + field.id] = JSON.stringify(field.value);
                return tmp;
              }).reduce(function(acc, elem) {
                var attr;
                for (attr in elem) { acc[attr] = elem[attr]; }
                return acc;
              });
            } else {
              outDoc[fieldsetId] = fieldset.multifields.map(function(multifield, index) {
                return multifield.fields.map(function(field, index) {
                  var tmp = {}; 
                  tmp['field_' + field.id] = JSON.stringify(field.value);
                  return tmp;
                }).reduce(function(acc, elem) {
                  var attr;
                  for (attr in elem) { acc[attr] = elem[attr]; }
                  return acc;
                });
              });
              
            }
          });
          
          emit(doc._id, outDoc);
        }
      }"
    },
    
    "index": {
      "map": "function(doc) { 
        var isReversal = function(elem) {return elem.reversal === true};
        
        var isHead = function(elem) {return elem.head === true};
        
        var gatherElems = function(acc, obj, filterFun, reversal) {
          acc = acc.concat(obj.fields.filter(function(elem, index) {
            return (filterFun(elem));
          }).map(function(elem, index) {
            if (reversal) {
              return [elem.value];
            } else {
              return [elem.sortkey, elem.value];
            }
          }));
          
          return acc;
        };
        
        var gather = function(acc, filterFun, reversal) {
          doc.fieldsets.forEach(function(fieldset, index) {
            if (! fieldset.multiple) {
              acc = gatherElems(acc, fieldset, filterFun, reversal);
            } else {
              fieldset.multifields.forEach(function(multifield, index) {
                acc = gatherElems(acc, multifield, filterFun, reversal);
              });
            }
          });
          
          return acc;
        }
        
        if (doc.doctype == '{{ _id }}' && doc.fieldsets && !doc.deleted_)  {
          var heads = gather([], isHead);
          var reversals = gather([], isReversal, true);
          
          if (heads.length === 0) { heads = [['', doc._id]] };
          
          emit(heads, reversals);
        } 
      }" 
    }
  }
}
