function(newDoc, saveDoc, userCtx) {
  String.prototype.isBlank = function() {
    return ((/^\\s*$/).test(this) && !(/\\S/).test(this) && !(this === null));
  };
  
  var forbid = function(name, msg) {
    var errorMsg = JSON.stringify({
      fieldname: name,
      message: msg
    });

    throw({forbidden: errorMsg});
  };
  
  if (newDoc.category === 'query') {
    [newDoc.doctype, newDoc.name, newDoc.fieldset, newDoc.field].forEach(function(field) {
      if (field.isBlank()) forbid('All fields', 'must be filled in.');
    });
    
    if (!(/^\\w*$/).test(newDoc.name)) {
      forbid('Name', 'may only contain alphanumeric characters and underscores.');
    }
    
    if (newDoc.conditions && newDoc.conditions.length > 0) {
      var firstCondition = newDoc.conditions[0];
      var lastCondition = newDoc.conditions[newDoc.conditions.length - 1];
      
      if (firstCondition.is_or == true || lastCondition.is_or == true) {
        forbid('Conditions', 'may not begin or end with OR.');
      }
      
      newDoc.conditions.forEach(function(condition, index) {
        var is_or = condition.is_or;
        var negate = condition.negate;
        var argument = condition.argument;
        var operator = condition.operator;
        var field = condition.field;
        var fieldset = condition. fieldset;
        
        if (is_or != true) {
        
          if (negate != true && negate != false) {
            forbid('Condition ' + index, 'negate must be true or false');
          }
          
          if (field.isBlank() || !(/^\\w*$/).test(field)) {
            forbid('Condition ' + index, 'invalid field.');
          }
          
          if (fieldset.isBlank() || !(/^\\w*$/).test(fieldset)) {
            forbid('Condition ' + index, 'invalid fieldset.');
          } 
          
          switch (operator) {
            case 'equal':
            case 'match':
            case 'greater': 
            case 'less':
            case 'match':
            case 'member':
              if (argument.isBlank()) {
                forbid('Condition ' + index, 'blank argument is not allowed.');
              }
              break;
            case 'true':
            case 'blank':
              if (!argument.isBlank()) {
                forbid('Condition ' + index, 'no argument allowed for this condition.');
              }
              break;
            default:
              forbid('Condition ' + index, 'invalid operator.');
          }
        } 
      });
    }
  }
}
