{
  "_id": "_design/doctypes",
  "version": 6,
  "views": {
    "alldocs" : {
      "map": "function(doc) {
        var isReversal = function(elem) {return elem.reversal === true};
        
        var isHead = function(elem) {return elem.head === true};
        
        var gatherElems = function(acc, obj, filterFun, reversal) {
          acc = acc.concat(obj.fields.filter(function(elem, index) {
            return (filterFun(elem));
          }).map(function(elem, index) {
            if (reversal) {
              return [elem.value];
            } else {
              return [elem.sortkey, elem.value];
            }
          }));
          
          return acc;
        };
        
        var gather = function(acc, filterFun, reversal) {
          doc.fieldsets.forEach(function(fieldset, index) {
            if (! fieldset.multiple) {
              acc = gatherElems(acc, fieldset, filterFun, reversal);
            } else {
              fieldset.multifields.forEach(function(multifield, index) {
                acc = gatherElems(acc, multifield, filterFun, reversal);
              });
            }
          });
          
          return acc;
        }
        
        if (doc.doctype && doc.fieldsets)  {
          var heads = gather([], isHead);
          var reversals = gather([], isReversal, true);
          
          if (heads.length === 0) { heads = [['', doc._id]] };
          
          emit([doc.doctype, !!doc.deleted_, heads], reversals);

        } else if (doc.category === 'doctype') {

          emit(doc._id, doc.description);

        }                  
      }"
    }
  },
  "updates": {
    "stamp": "function(doc, req) {
      var newDoc = JSON.parse(req.body);
      var now = (new Date()).toUTCString();

      if (!doc) {
        if (newDoc._id) {
          newDoc.created_at_ = now;
          newDoc.created_by_ = req.userCtx.name;
          message = 'Created at ' + now.toString + ' by ' + req.userCtx.name;
        } else {
          newDoc = null;
          message = 'This application expects the document _id in the JSON body';
        }
      } else {
      
        newDoc.updated_at_ = now;
        newDoc.updated_by_ = req.userCtx.name;
        newDoc.created_at_ = doc.created_at_;
        
        if (doc.create_user_) {
          newDoc.created_by_ = doc.create_user_;
        } else {
          newDoc.created_by_ = doc.created_by_;
        }
        
        message = 'Updated at ' + now.toString + ' by ' + req.userCtx.name;
        
        newDoc.prev_ = doc._rev;
      }
       
      return [newDoc, message];
    }"
  },
  "validate_doc_update": "{% include 'javascript_validation.dtl' %}"
}
