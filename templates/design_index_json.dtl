{
  "_id": "_design/{{ _id }}",
  "version": "{{_rev}}",
  "views": {
    "index": {
      "map": "function(doc) {
        if (doc.doctype === '{{doctype}}' && !(doc.category) && doc.index &&
            (!!doc.deleted_) === {{show_deleted}}) {
          
          var display_fields = [
            {% for field in fields %}
              {% if forloop.last %}
              '{{field}}'
              {% else %}
              '{{field}}',
              {% endif %}
            {% endfor %}
          ];
          
          var lookup = function(fieldid) {
            var retval;

            switch(fieldid) {
              case 'created_by_':
              case 'updated_by_':
              case 'created_at_':
              case 'updated_at_':
                retval = ['', doc[fieldid]];
                break;
              default:
                retval = doc.index[fieldid];
            }

            return retval;
          };

          var isArray = function(anArray) {
            return Object.prototype.toString.apply(anArray) ===
              '[object Array]';
          };

          var notBlank = function(val) {
            return (val !== undefined && val !== null && val.toString() !== '');
          };
          
          var runTest = function(fieldid, value, pred, existential) {
            var fieldVal = lookup(fieldid);
            var retval = false;

            if (notBlank(fieldVal)) {
              if (!isArray(fieldVal[0])) {
                retval = pred(fieldVal[1], value);
              } else {
                if (typeof existential === 'number') {
                  retval = pred(fieldVal[existential][1], value);
                } else {
                  retval = fieldVal.some(function(fVal) {
                    return pred(fVal[1], value);
                  });
                }
              }
            }

            return retval;
          };

          var runShapeTest = function(fieldid, value, pred) {
            var fieldVal = lookup(fieldid);
            return pred(fieldVal, value);
          };

          var equals = function(fieldid, value, existential) {
            var pred = function(value1, value2) {
              return value1 === value2;
            };
            return runTest(fieldid, value, pred, existential);
          };

          var greaterThan = function(fieldid, value, existential) {
            var pred = function(value1, value2) {
              return value1 > value2;
            };
            return runTest(fieldid, value, pred, existential);
          };

          var lessThan = function(fieldid, value, existential) {
            var pred = function(value1, value2) {
              return value1 < value2;
            };
            return runTest(fieldid, value, pred, existential);
          };

          var matches = function(fieldid, value, existential) {
            var pred = function(value1, value2) {
              return !!value1.match(value2);
            };
            return runTest(fieldid, value, pred, existential);
          };

          var hasExactly = function(fieldid, value) {
            var pred = function(value1, value2) {
              var retval = false;
              if (value1) {
                retval = value1.length === value2;
              }
              return retval;             
            };
            return runShapeTest(fieldid, value, pred);
          };

          var hasGreater = function(fieldid, value) {
            var pred = function(value1, value2) {
              var retval = false;
              if (value1) {
                retval = value1.length > value2;
              }
              return retval;             
            };
            return runShapeTest(fieldid, value, pred);
          };

          var hasLess = function(fieldid, value) {
            var pred = function(value1, value2) {
              var retval = false;
              if (value1) {
                retval = value1.length < value2;
              }
              return retval;             
            };
            return runShapeTest(fieldid, value, pred);
          };

          var hasMember = function(fieldid, value, existential) {
            var pred = function(value1, value2) {
              return value1.indexOf(value2) >= 0;
            };
            return runTest(fieldid, value, pred, existential);
          };

          var isDefined = function(fieldid) {
            var pred = function(value1, value2) {
              return value1 !== value2;
            };
            return runShapeTest(fieldid, undefined, pred);
          };

          var isTrue = function(fieldid, existential) {
            return equals(fieldid, true, existential);
          };

          var isBlank = function(fieldid, existential) {
            var pred = function(value1, value2) {
              return !notBlank(value1);
            };
            return runTest(fieldid, null, pred, existential);
          };
 
          var existentialTest = function(fieldid, testFuns) {
            var retval = false;
            var fields = lookup(fieldid);
            
            retval = fields.some(function(v,i) {
              return testFun(i);
            });

            return retval;
          };

          var head = function() {
            var hd = doc.head;
            return hd.map(function(h) {
              var v = lookup(h);
              if (isArray(v[0])) {
                if (notBlank(v[0][1])) {
                  return v[0][1] + '...';
                } else {
                  return '...';
                }
              } else {
                return v[1];
              }
            }).join(', ');
          };
 
          var condition = function() {
            return ({{expression}});
          };

          {% if replace_function %}
          var runReplace = {{replace_function}}
          {% endif %}

          var format = function(val) {
            var retval = '_BLANK_';

            if (isArray(val)) {
              retval = val.map(function(i) {return i.toString();}).join(',');
            } else {
              if (notBlank(val)) {
                retval = val.toString();
              }
            }

            {% if replace_function %}
            return runReplace(retval);
            {% else %}
            return retval;
            {% endif %}
          };

          var emitIf = function(fieldVal) {
            if (condition()) {
              var formatted = format(fieldVal[1]);

              if (display_fields.lenghth > 1) {
                emit([['', formatted]], ['', head()]);
              } else {
                {% if replace_function %}
                emit([['', formatted]], ['', head()]);
                {% else %}
                emit([[fieldVal[0], formatted]], ['', head()]);
                {% endif %}
              }
            }
          };

          var emitForField = function(fieldid) {
            var fieldVal = lookup(fieldid);
            
            if (!notBlank(fieldVal)) {
              emitIf(['', '_UNDEFINED_']);
            } else if (isArray(fieldVal[0])) {
              fieldVal.forEach(function(item) {
                emitIf(item);
              });
            } else {
              emitIf(fieldVal);
            }
          };

          display_fields.forEach(function(item) {
            emitForField(item);
          });
        }
      }" 
    }
  }
}
